# AUTOGENERATED! DO NOT EDIT! File to edit: ../../notebooks/Base_Batch_Job_Context.ipynb.

# %% auto 0
__all__ = ["BatchJobContext"]

# %% ../../notebooks/Base_Batch_Job_Context.ipynb 3
from typing import *
from os import environ

import airt_service.sanitizer
from airt.logger import get_logger
from ..aws.utils import get_available_aws_regions
from ..azure.utils import get_available_azure_regions

# %% ../../notebooks/Base_Batch_Job_Context.ipynb 5
logger = get_logger(__name__)

# %% ../../notebooks/Base_Batch_Job_Context.ipynb 6
class BatchJobContext:
    def __init__(self, task: str):
        """Batch Job Context

        Do not use __init__, please use factory method `create` to initiate object
        """
        self.task = task

    def create_job(self, command: str, environment_vars: Dict[str, str]):
        """Create a new job

        Args:
            command: Command to execute in job
            environment_vars: Environment vars to set in the container
        """
        raise NotImplementedError()

    _factories: Dict[str, Any] = {}

    @classmethod
    def create(cls, task: str, **kwargs) -> "BatchJobContext":
        """Factory method to create a new job

        Args:
            task: Task name to get batch environment info; One of csv_processing, predictions, preprocessing and training
            kwargs: Key word arguments which will be passed to the constructor of inherited class

        Returns:
            The initialized object of the inherited class
        """
        # default executor is AWS & Azure
        ctx_name = (
            "AzureBatchJobContext"
            if "cloud_provider" in kwargs and kwargs["cloud_provider"] == "azure"
            else "AwsBatchJobContext"
        )

        if "JOB_EXECUTOR" in environ:
            if environ["JOB_EXECUTOR"] == "aws":
                cloud_provider = kwargs["cloud_provider"]
                ctx_name = (
                    "AzureBatchJobContext"
                    if cloud_provider == "azure"
                    else "AwsBatchJobContext"
                )
            elif environ["JOB_EXECUTOR"] == "fastapi":
                ctx_name = "FastAPIBatchJobContext"
            elif environ["JOB_EXECUTOR"] == "none":
                ctx_name = "NoneBatchJobContext"
            else:
                raise ValueError(f'Unknown value: {environ["JOB_EXECUTOR"]=}')

        factory = BatchJobContext._factories[ctx_name]
        return factory(task=task, **kwargs)

    @classmethod
    def add_factory(cls):
        BatchJobContext._factories[cls.__name__] = cls

    def __enter__(self):
        logger.info(f"Entering {self}")
        return self

    def __exit__(self, exc_type, exc, exc_tb):
        logger.info(f"Exiting {self}: {exc_type=}, {exc=}, {exc_tb}")
        return False

    def __repr__(self) -> str:
        return f"{self.__class__.__name__}(task={self.task})"
