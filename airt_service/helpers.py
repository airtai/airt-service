# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/Helpers.ipynb.

# %% auto 0
__all__ = ['pwd_context', 'get_password_hash', 'verify_password', 'get_storage_path', 'get_datasource_path', 'get_model_path',
           'get_prediction_path', 'generate_random_string', 'set_env_variable_context', 'commit_or_rollback',
           'truncate', 'df_to_dict', 'dict_to_df', 'validate_user_inputs', 'get_attr_by_name']

# %% ../notebooks/Helpers.ipynb 3
import os
import random
import re
import string
from contextlib import contextmanager
from os import environ
from pathlib import Path
from typing import *

import airt_service.sanitizer
import pandas as pd
import requests
from airt.logger import get_logger
from fastcore.utils import *
from passlib.context import CryptContext
from sqlmodel import Session

# %% ../notebooks/Helpers.ipynb 7
logger = get_logger(__name__)

# %% ../notebooks/Helpers.ipynb 8
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# %% ../notebooks/Helpers.ipynb 9
def get_password_hash(password: str) -> str:
    """Get the hash for a given password

    Args:
        password: Password to be hashed as a string

    Returns:
        The hashed password as a string
    """
    return pwd_context.hash(password)


def verify_password(plain_password: str, hashed_password: str) -> bool:
    """Validate if the hashed password is derived from the plain password

    Args:
        plain_password: Plain password as a string
        hashed_password: Hashed password stored in the database as a string

    Returns:
        True, if the hashed password is derived from the plain password else False
    """
    return pwd_context.verify(plain_password, hashed_password)

# %% ../notebooks/Helpers.ipynb 11
def get_storage_path() -> Path:
    """Get the root storage_path to store datasource, models, predictions in local

    Returns:
        The root storage path
    """
    storage_path = Path(os.environ.get("STORAGE_PATH", "./storage"))
    storage_path = storage_path.absolute()
    storage_path.mkdir(parents=True, exist_ok=True)
    return storage_path

# %% ../notebooks/Helpers.ipynb 13
def get_datasource_path() -> Path:
    """Get a local path to store the datasources

    Returns:
        A path to store the datasources
    """
    storage_path = get_storage_path()
    datasource_path = storage_path / "datasource"
    datasource_path.mkdir(parents=False, exist_ok=True)
    return datasource_path

# %% ../notebooks/Helpers.ipynb 15
def get_model_path() -> Path:
    """Get a local path to store the models

    Returns:
        A path to store the models
    """
    storage_path = get_storage_path()
    model_path = storage_path / "model"
    model_path.mkdir(parents=False, exist_ok=True)
    return model_path

# %% ../notebooks/Helpers.ipynb 17
def get_prediction_path() -> Path:
    """Get a local path to store the predictions

    Returns:
        A path to store the predictions
    """
    storage_path = get_storage_path()
    prediction_path = storage_path / "prediction"
    prediction_path.mkdir(parents=False, exist_ok=True)
    return prediction_path

# %% ../notebooks/Helpers.ipynb 19
def generate_random_string(length: int = 6) -> str:
    """Generate a random string of the given length

    Args:
        length: Length of the random string. If not set, then the default value 6 will be used.

    Returns:
        A random string of the given length
    """
    return "".join(
        random.choice(string.ascii_uppercase + string.digits)  # nosec B311
        for _ in range(length)
    )

# %% ../notebooks/Helpers.ipynb 21
@contextmanager
def set_env_variable_context(variable: str, value: str):
    old_value = environ[variable] if variable in environ else None
    environ[variable] = value
    yield
    if old_value is None:
        del environ[variable]
    else:
        environ[variable] = old_value

# %% ../notebooks/Helpers.ipynb 23
@contextmanager
def commit_or_rollback(session: Session):
    """A context manager to commit the changes to the database. In the case of an exception,
    the database will be rollback to the previous state.

    Args:
        session: Current session object
    """
    try:
        yield
        session.commit()
    except Exception as e:
        session.rollback()
        raise e

# %% ../notebooks/Helpers.ipynb 25
def truncate(s: str, length: int = 255) -> str:
    """Truncate the string to a given length

    Args:
        s: String to truncate
        length: Length to truncate the string

    Returns:
        The truncated string
    """
    return s[:length]

# %% ../notebooks/Helpers.ipynb 27
def df_to_dict(df: pd.DataFrame) -> Dict[str, Any]:
    """Convert pandas dataframe to dict

    Args:
        df: Input dataframe

    Returns:
        A dict the data and dtypes
    """
    d = {
        "data": df.to_dict("tight"),
        "dtypes": df.dtypes.apply(lambda x: str(x)).to_dict(),
    }
    return d


def dict_to_df(d: Dict[str, Any]) -> pd.DataFrame:
    """Convert the dict into a pandas dataframe

    Args:
        d: Dict containing the data and dtypes

    Returns:
        The pandas dataframe constructed from the dict
    """
    data = d["data"]
    dtypes = d["dtypes"]
    df = pd.DataFrame.from_dict(data, orient="tight")
    for k, v in dtypes.items():
        df[k] = df[k].astype(v)
    return df

# %% ../notebooks/Helpers.ipynb 29
def _detect_sql_code_injection(s: str) -> bool:
    """Check if the given string contains SQL code injection

    Args:
        s: String to validate

    Returns:
        True, if the given string contains SQL code injection
    """
    # https://larrysteinle.com/2011/02/20/use-regular-expressions-to-detect-sql-code-injection/
    regex_text = "('(''|[^'])*')|(;)|(\b(ALTER|CREATE|DELETE|DROP|EXEC(UTE){0,1}|INSERT( +INTO){0,1}|MERGE|SELECT|UPDATE|UNION( +ALL){0,1})\b)"
    return bool(re.search(regex_text, s))

# %% ../notebooks/Helpers.ipynb 31
def validate_user_inputs(xs: List[str]):
    """Validate the user input for SQL code injection

    Args:
        xs: List of strings

    Raises:
        ValueError: If the list contains SQL code injection
    """
    for i in xs:
        if _detect_sql_code_injection(i):
            raise ValueError(f"The input {i} is invalid. SQL code injection detected.")

# %% ../notebooks/Helpers.ipynb 34
def get_attr_by_name(xs: Dict[str, Any], attr_name: str) -> Union[str, None]:
    """Get the attribute by name from the input dictionary

    The input dictionary may contain nested objects, and the attribute may present at the root
    level or nested within the dictionary. This function searches the entire dictionary and
    returns the attribute's value if a match is found; otherwise, it returns None.

    Args:
        xs: Input dictionary
        attr_name: The name of the attribute for which the value must be retrieved

    Returns:
        If the given attribute name is found in the input dictionary, the value of the attribute will be returned; otherwise, None
    """
    if attr_name in xs:
        ret_val = xs[attr_name]
    else:
        ret_val = next(
            (getattr(v, attr_name) for v in xs.values() if hasattr(v, attr_name)), None
        )
    return ret_val
