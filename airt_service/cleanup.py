# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/Cleanup.ipynb.

# %% auto 0
__all__ = ['cleanup_predictions', 'cleanup_models', 'cleanup_datasources', 'cleanup_datablobs', 'cleanup_apikeys', 'cleanup_user']

# %% ../notebooks/Cleanup.ipynb 3
from typing import *

from airt.logger import get_logger
from sqlmodel import Session, select

import airt_service.sanitizer
from .auth import delete_apikey
from .aws.utils import get_s3_storage_bucket
from .data.datablob import delete_datablob
from .data.datasource import delete_datasource
from .db.models import APIKey, DataBlob, DataSource, Model, Prediction, User
from .model.prediction import delete_prediction
from .model.train import delete_model

# %% ../notebooks/Cleanup.ipynb 5
logger = get_logger(__name__)

# %% ../notebooks/Cleanup.ipynb 9
def cleanup_predictions(user_to_cleanup: User, session: Session) -> None:
    """Cleanup predictions"""
    logger.info("deleting predictions")
    predictions = session.exec(
        select(Prediction).join(Model).where(Model.user == user_to_cleanup)
    ).all()

    for prediction in predictions:
        delete_prediction(
            prediction_uuid=prediction.uuid,  # type: ignore
            user=user_to_cleanup,
            session=session,
        )
        session.delete(prediction)
    session.commit()

# %% ../notebooks/Cleanup.ipynb 11
def cleanup_models(user_to_cleanup: User, session: Session) -> None:
    """Cleanup models"""
    logger.info("deleting models")
    models = session.exec(select(Model).where(Model.user == user_to_cleanup)).all()

    for model in models:
        delete_model(
            model_uuid=model.uuid,  # type: ignore
            user=user_to_cleanup,
            session=session,
        )
        session.delete(model)
    session.commit()

# %% ../notebooks/Cleanup.ipynb 13
def cleanup_datasources(user_to_cleanup: User, session: Session) -> None:
    """Cleanup datasources"""
    logger.info("deleting datasources")
    datasources = session.exec(
        select(DataSource).where(DataSource.user == user_to_cleanup)
    ).all()

    for datasource in datasources:
        delete_datasource(
            datasource_uuid=datasource.uuid,  # type: ignore
            user=user_to_cleanup,
            session=session,
        )
        session.delete(datasource)
    session.commit()

# %% ../notebooks/Cleanup.ipynb 15
def cleanup_datablobs(user_to_cleanup: User, session: Session) -> None:
    """Cleanup datablobs"""
    logger.info("deleting datablobs")
    datablobs = session.exec(
        select(DataBlob).where(DataBlob.user == user_to_cleanup)
    ).all()

    for datablob in datablobs:
        delete_datablob(
            datablob_uuid=datablob.uuid,  # type: ignore
            user=user_to_cleanup,
            session=session,
        )
        session.delete(datablob)
    session.commit()

# %% ../notebooks/Cleanup.ipynb 17
def cleanup_apikeys(user_to_cleanup: User, session: Session) -> None:
    """Cleanup apikeys"""
    logger.info("deleting apikeys")
    apikeys = session.exec(select(APIKey).where(APIKey.user == user_to_cleanup)).all()

    for apikey in apikeys:
        delete_apikey(
            user_uuid_or_name=str(user_to_cleanup.uuid),
            key_uuid_or_name=str(apikey.uuid),
            user=user_to_cleanup,
            session=session,
        )
        session.delete(apikey)
    session.commit()

# %% ../notebooks/Cleanup.ipynb 19
def cleanup_user(user_to_cleanup: User, session: Session) -> None:
    """Cleanup user"""
    cleanup_predictions(user_to_cleanup, session)
    cleanup_models(user_to_cleanup, session)
    cleanup_datasources(user_to_cleanup, session)
    cleanup_datablobs(user_to_cleanup, session)
    cleanup_apikeys(user_to_cleanup, session)

    bucket, base_path = get_s3_storage_bucket()
    s3_path = (
        f"{base_path}/{user_to_cleanup.id}" if base_path else str(user_to_cleanup.id)
    )
    logger.info(f"Deleting user files in s3://{bucket.name}/{s3_path}")
    bucket.objects.filter(Prefix=s3_path + "/").delete()

    #     delete_topics_for_user(username=user_to_cleanup.username)

    logger.info("deleting user")
    session.delete(user_to_cleanup)
    session.commit()
