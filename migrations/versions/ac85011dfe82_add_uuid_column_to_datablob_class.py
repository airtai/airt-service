"""Add uuid column to DataBlob class

Revision ID: ac85011dfe82
Revises: bf97c2ac9477
Create Date: 2022-08-15 05:30:19.715118

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = 'ac85011dfe82'
down_revision = 'bf97c2ac9477'
branch_labels = None
depends_on = None

import uuid

from sqlmodel import select
from sqlalchemy.exc import NoResultFound
from sqlalchemy.orm.exc import StaleDataError

from airt_service.db.models import check_db_is_up, get_session_with_context

DEFAULT_UUID = "0"*32

def set_uuid_for_existing_records(table_name: str):
    """Set uuid for existing records"""
    with get_session_with_context() as session:
        try:
            records = session.exec(f'SELECT * FROM {table_name}')
        except NoResultFound:
            return
        for record in records:
            try:
                record = session.exec(f'UPDATE {table_name} SET uuid = "{uuid.uuid4().hex}" WHERE id = {record["id"]}')
                session.commit()
            except StaleDataError:
                session.rollback()

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('datablob', sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), nullable=False, server_default=DEFAULT_UUID))
    
    # Set uuid for existing datablobs
    set_uuid_for_existing_records(table_name="datablob")
    
    op.create_index(op.f('ix_datablob_uuid'), 'datablob', ['uuid'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_datablob_uuid'), table_name='datablob')
    op.drop_column('datablob', 'uuid')
    # ### end Alembic commands ###