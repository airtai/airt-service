"""Add uuid column to all classes

Revision ID: 8529bac65520
Revises: ac85011dfe82
Create Date: 2022-08-22 00:38:07.230279

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = '8529bac65520'
down_revision = 'ac85011dfe82'
branch_labels = None
depends_on = None

import uuid

from sqlmodel import select
from sqlalchemy.exc import NoResultFound
from sqlalchemy.orm.exc import StaleDataError

from airt_service.db.models import check_db_is_up, get_session_with_context

DEFAULT_UUID = "0"*32

def set_uuid_for_existing_records(table_name: str):
    """Set uuid for existing records"""
    with get_session_with_context() as session:
        try:
            records = session.exec(f'SELECT * FROM {table_name}')
        except NoResultFound:
            return
        for record in records:
            try:
                record = session.exec(f'UPDATE {table_name} SET uuid = "{uuid.uuid4().hex}" WHERE id = {record["id"]}')
                session.commit()
            except StaleDataError:
                session.rollback()


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('apikey', sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), nullable=False, server_default=DEFAULT_UUID))
    set_uuid_for_existing_records(table_name="apikey")
    op.create_index(op.f('ix_apikey_uuid'), 'apikey', ['uuid'], unique=False)
    
    op.add_column('datasource', sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), nullable=False, server_default=DEFAULT_UUID))
    set_uuid_for_existing_records(table_name="datasource")
    op.create_index(op.f('ix_datasource_uuid'), 'datasource', ['uuid'], unique=False)
    
    op.add_column('model', sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), nullable=False, server_default=DEFAULT_UUID))
    set_uuid_for_existing_records(table_name="model")
    op.create_index(op.f('ix_model_uuid'), 'model', ['uuid'], unique=False)
    
    op.add_column('prediction', sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), nullable=False, server_default=DEFAULT_UUID))
    set_uuid_for_existing_records(table_name="prediction")
    op.create_index(op.f('ix_prediction_uuid'), 'prediction', ['uuid'], unique=False)
    
    op.add_column('predictionpush', sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), nullable=False, server_default=DEFAULT_UUID))
    set_uuid_for_existing_records(table_name="predictionpush")
    op.create_index(op.f('ix_predictionpush_uuid'), 'predictionpush', ['uuid'], unique=False)
    
    op.add_column('tag', sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), nullable=False, server_default=DEFAULT_UUID))
    set_uuid_for_existing_records(table_name="tag")
    op.create_index(op.f('ix_tag_uuid'), 'tag', ['uuid'], unique=False)
    
    op.add_column('user', sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), nullable=False, server_default=DEFAULT_UUID))
    set_uuid_for_existing_records(table_name="user")
    op.create_index(op.f('ix_user_uuid'), 'user', ['uuid'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_uuid'), table_name='user')
    op.drop_column('user', 'uuid')
    
    op.drop_index(op.f('ix_tag_uuid'), table_name='tag')
    op.drop_column('tag', 'uuid')
    
    op.drop_index(op.f('ix_predictionpush_uuid'), table_name='predictionpush')
    op.drop_column('predictionpush', 'uuid')
    
    op.drop_index(op.f('ix_prediction_uuid'), table_name='prediction')
    op.drop_column('prediction', 'uuid')
    
    op.drop_index(op.f('ix_model_uuid'), table_name='model')
    op.drop_column('model', 'uuid')
    
    op.drop_index(op.f('ix_datasource_uuid'), table_name='datasource')
    op.drop_column('datasource', 'uuid')
    
    op.drop_index(op.f('ix_apikey_uuid'), table_name='apikey')
    op.drop_column('apikey', 'uuid')
    # ### end Alembic commands ###
